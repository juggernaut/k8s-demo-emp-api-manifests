apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-test
spec:
  params:
  - name: subdir
    description: subdir in the workspace containing the golang source
    default: ./
  - name: packages
    description: packages to test
    default: ./...
  workspaces:
  - name: source
  steps:
    - name: run-go-test
      image: golang:1.17
      workingDir: "$(workspaces.source.path)/$(params.subdir)"
      script: go test -v $(packages)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: golang-test-and-build
spec:
  params:
  - name: subdir
    description: subdir in the workspace containing the golang source
    default: ./
  workspaces:
  - name: source
  steps:
    - name: run-tests-and-build-executable
      image: golang:1.17
      workingDir: "$(workspaces.source.path)/$(params.subdir)"
      script: |
        go test -v ./api
        CGO_ENABLED=1 GOOS=linux go build
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-env-configmap
data:
  ARGOCD_SERVER: argocd-server.argocd.svc.cluster.local
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kustomize-set-image-tag
spec:
  params:
  - name: context
    description: context relative to the workspace where kustomize should run
    default: ./
  - name: image
    description: name of the image whose tag you want to bump
  - name: tag
    description: tag to set the image to
  workspaces:
  - name: source
  steps:
    - name: set-image-tag
      image: line/kubectl-kustomize:latest
      workingDir: "$(workspaces.source.path)/$(params.context)"
      script: |
        kustomize edit set image "$(params.image)=$(params.image):$(params.tag)"
        # For debugging
        cat kustomization.yaml
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  workspaces:
    - name: cd-ws
    - name: git-ssh-creds
    - name: git-manifests-repo-ssh-creds
    - name: docker-creds
  params:
    - name: sha
      description: SHA of the commit we'll build an deploy
    - name: short-sha
      description: Truncated version of the SHA for container image tagging
  tasks:
    - name: clone-repo
      taskRef:
        name: git-cli
      workspaces:
        - name: ssh-directory
          workspace: git-ssh-creds
        - name: source
          workspace: cd-ws
      params:
        - name: BASE_IMAGE
          value: "alpine/git:v2.32.0"
        - name: GIT_USER_NAME
          value: "build-bot"
        - name: GIT_USER_EMAIL
          value: "build-bot@empapi.io"
        - name: GIT_SCRIPT
          value: |
            git clone git@github.com:juggernaut/k8s-demo-emp-api.git
            cd k8s-demo-emp-api
            git checkout $(params.sha)

    - name: test-and-build-app
      taskRef:
        name: golang-test-and-build
      runAfter:
        - clone-repo
      workspaces:
        - name: source
          workspace: cd-ws
      params:
        - name: subdir
          value: k8s-demo-emp-api

    - name: build-and-push-image
      taskRef:
        name: kaniko
      runAfter:
        - test-and-build-app
      workspaces:
        - name: source
          workspace: cd-ws
        - name: dockerconfig
          workspace: docker-creds
      params:
        - name: IMAGE
          value: "juggernaut/k8s-demo-emp-api:$(params.short-sha)"
        - name: DOCKERFILE
          value: ./kaniko-dockerfile
        - name: CONTEXT
          value: ./k8s-demo-emp-api

    - name: clone-manifests-repo
      taskRef:
        name: git-cli
      runAfter:
        - build-and-push-image
      workspaces:
        - name: ssh-directory
          workspace: git-manifests-repo-ssh-creds
        - name: source
          workspace: cd-ws
      params:
        - name: BASE_IMAGE
          value: "alpine/git:v2.32.0"
        - name: GIT_USER_NAME
          value: "build-bot"
        - name: GIT_USER_EMAIL
          value: "build-bot@empapi.io"
        - name: GIT_SCRIPT
          value: |
            git clone git@github.com:juggernaut/k8s-demo-emp-api-manifests.git

    - name: bump-staging-image-tag
      taskRef:
        name: kustomize-set-image-tag
      runAfter:
        - build-and-push-image
        - clone-manifests-repo
      workspaces:
        - name: source
          workspace: cd-ws
      params:
        - name: image
          value: juggernaut/k8s-demo-emp-api
        - name: context
          value: ./k8s-demo-emp-api-manifests/manifests/staging
        - name: tag
          value: $(params.short-sha)

    - name: commit-staging-image-bump
      taskRef:
        name: git-cli
      runAfter:
        - bump-staging-image-tag
      workspaces:
        - name: ssh-directory
          workspace: git-manifests-repo-ssh-creds
        - name: source
          workspace: cd-ws
      params:
        - name: BASE_IMAGE
          value: "alpine/git:v2.32.0"
        - name: GIT_USER_NAME
          value: "build-bot"
        - name: GIT_USER_EMAIL
          value: "build-bot@empapi.io"
        - name: GIT_SCRIPT
          value: |
            #!/bin/bash
            cd k8s-demo-emp-api-manifests
            if [ -z $(git status -s) ]; then
              echo "Nothing to commit!"
            else
              git commit -m "build-bot: Update staging image tag to $(params.short-sha)" manifests/staging/kustomization.yaml
              git push origin main
            fi

    - name: sync-staging-app
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - commit-staging-image-bump
      params:
        - name: application-name
          value: k8s-demo-emp-api-staging
        - name: flags
          value: --insecure # since argo is locally hosted, don't use in production!
        - name: argocd-version
          value: v2.1.7

    - name: cluster-test
      taskRef:
        name: golang-test
      runAfter:
        - sync-staging-app
      workspaces:
        - name: source
          workspace: cd-ws
      params:
        - name: subdir
          value: k8s-demo-emp-api
        - name: packages
          value: ./clustertest

    - name: bump-prod-image-tag
      taskRef:
        name: kustomize-set-image-tag
      runAfter:
        - cluster-test
      workspaces:
        - name: source
          workspace: cd-ws
      params:
        - name: image
          value: juggernaut/k8s-demo-emp-api
        - name: context
          value: ./k8s-demo-emp-api-manifests/manifests/production
        - name: tag
          value: $(params.short-sha)

    - name: commit-prod-image-bump
      taskRef:
        name: git-cli
      runAfter:
        - bump-prod-image-tag
      workspaces:
        - name: ssh-directory
          workspace: git-manifests-repo-ssh-creds
        - name: source
          workspace: cd-ws
      params:
        - name: BASE_IMAGE
          value: "alpine/git:v2.32.0"
        - name: GIT_USER_NAME
          value: "build-bot"
        - name: GIT_USER_EMAIL
          value: "build-bot@empapi.io"
        - name: GIT_SCRIPT
          value: |
            #!/bin/bash
            cd k8s-demo-emp-api-manifests
            if [ -z $(git status -s) ]; then
              echo "Nothing to commit!"
            else
              git commit -m "build-bot: Update prod image tag to $(params.short-sha)" manifests/production/kustomization.yaml
              git push origin main
            fi

    - name: sync-prod-app
      taskRef:
        name: argocd-task-sync-and-wait
      runAfter:
        - commit-prod-image-bump
      params:
        - name: application-name
          value: k8s-demo-emp-api-prod
        - name: flags
          value: --insecure # since argo is locally hosted, don't use in production!
        - name: argocd-version
          value: v2.1.7